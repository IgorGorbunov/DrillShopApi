// <auto-generated />
using System;
using DrillShopApi.DAL.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace DAL.Migrations
{
    [DbContext(typeof(DrillShopContext))]
    partial class DrillShopContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Drill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ArtCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DrillType")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<double>("MaxDiametr")
                        .HasColumnType("double precision");

                    b.Property<double>("MinDiametr")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("ModifiedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ProviderId")
                        .HasColumnType("bigint");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Drills");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Provider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.ShopAvailability", b =>
                {
                    b.Property<long>("Entity1Id")
                        .HasColumnType("bigint")
                        .HasColumnName("DrillId");

                    b.Property<long>("Entity2Id")
                        .HasColumnType("bigint")
                        .HasColumnName("ShopId");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint")
                        .HasColumnName("ShopId1");

                    b.HasKey("Entity1Id", "Entity2Id");

                    b.HasIndex("Entity2Id");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopAvailabilities");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.WHAvailability", b =>
                {
                    b.Property<long>("Entity1Id")
                        .HasColumnType("bigint")
                        .HasColumnName("DrillId");

                    b.Property<long>("Entity2Id")
                        .HasColumnType("bigint")
                        .HasColumnName("WarehouseId");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<long?>("WarehouseId")
                        .HasColumnType("bigint")
                        .HasColumnName("WarehouseId1");

                    b.HasKey("Entity1Id", "Entity2Id");

                    b.HasIndex("Entity2Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WHAvailabilities");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("Area")
                        .HasColumnType("double precision");

                    b.Property<double>("Capacity")
                        .HasColumnType("double precision");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTimeOffset>("CreatedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("ModifiedDateTimeOffset")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Drill", b =>
                {
                    b.HasOne("DrillShopApi.DAL.Domain.Provider", "Provider")
                        .WithMany()
                        .HasForeignKey("ProviderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.ShopAvailability", b =>
                {
                    b.HasOne("DrillShopApi.DAL.Domain.Drill", "Entity1")
                        .WithMany("ShopAvailabilities")
                        .HasForeignKey("Entity1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillShopApi.DAL.Domain.Shop", "Entity2")
                        .WithMany()
                        .HasForeignKey("Entity2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillShopApi.DAL.Domain.Shop", null)
                        .WithMany("ShopAvailabilities")
                        .HasForeignKey("ShopId");

                    b.Navigation("Entity1");

                    b.Navigation("Entity2");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.WHAvailability", b =>
                {
                    b.HasOne("DrillShopApi.DAL.Domain.Drill", "Entity1")
                        .WithMany("WHAvailabilities")
                        .HasForeignKey("Entity1Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillShopApi.DAL.Domain.Warehouse", "Entity2")
                        .WithMany()
                        .HasForeignKey("Entity2Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DrillShopApi.DAL.Domain.Warehouse", null)
                        .WithMany("WHAvailabilities")
                        .HasForeignKey("WarehouseId");

                    b.Navigation("Entity1");

                    b.Navigation("Entity2");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Drill", b =>
                {
                    b.Navigation("ShopAvailabilities");

                    b.Navigation("WHAvailabilities");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Shop", b =>
                {
                    b.Navigation("ShopAvailabilities");
                });

            modelBuilder.Entity("DrillShopApi.DAL.Domain.Warehouse", b =>
                {
                    b.Navigation("WHAvailabilities");
                });
#pragma warning restore 612, 618
        }
    }
}
